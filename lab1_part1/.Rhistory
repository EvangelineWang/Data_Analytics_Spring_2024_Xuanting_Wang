setwd('C:/Users/Desktop/Data Analytics')
setwd('/Users/evangeline/desktop/Data Analytics')
# Load the "readxl" package if it's not already installed
library(readxl)
# Read excel file
data_excel <- read_excel("2010EPI_data.xls", sheet = "EPI2010_all countries")
#Read a csv file
EPI_data <- read.csv("2010EPI_data.csv", skip = 1)
summary(data)
# Scatter Plot two columns of a dataset
plot(EPI_data$BIODIVERSITY, EPI_data$CLIMATE, xlab = "BIODIVERSITY", ylab = "CLIMATE", main = "Plot between climate and biodiversity")
# Finding common column between two datasets
common_column = intersect(names(data_excel), names(data_csv))
# Load R datasets
data()
setwd('/Users/evangeline/desktop/Data Analytics/lab1')
# Load the "readxl" package if it's not already installed
library(readxl)
# Read excel file
data_excel <- read_excel("2010EPI_data.xls", sheet = "EPI2010_all countries")
#Read a csv file
EPI_data <- read.csv("2010EPI_data.csv", skip = 1)
# Load the "readxl" package if it's not already installed
library(readxl)
setwd('/Users/evangeline/desktop/Data Analytics/lab1')
# Load the "readxl" package if it's not already installed
library(readxl)
# Read excel file
data_excel <- read_excel("2010EPI_data.xls", sheet = "EPI2010_all countries")
#Read a csv file
EPI_data <- read.csv("2010EPI_data.csv", skip = 1)
summary(data)
# Scatter Plot two columns of a dataset
plot(EPI_data$BIODIVERSITY, EPI_data$CLIMATE, xlab = "BIODIVERSITY", ylab = "CLIMATE", main = "Plot between climate and biodiversity")
# Finding common column between two datasets
common_column = intersect(names(data_excel), names(data_csv))
# Load R datasets
data()
help(data)
# Example loading an R dataset
data(EuStockMarkets)
# View the dataset
View(EPI_data)
setwd('/Users/evangeline/desktop/Data Analytics/lab1')
# Load the "readxl" package if it's not already installed
library(readxl)
# Read excel file
data_excel <- read_excel("2010EPI_data.xls", sheet = "EPI2010_all countries")
#Read a csv file
EPI_data <- read.csv("2010EPI_data.csv", skip = 1)
summary(data)
#Read a csv file
EPI_data <- read.csv("2010EPI_data.csv")
summary(data)
View(EPI_data)
View(EPI_data)
data1 <-read.csv('/Users/evangeline/desktop/Data Analytics/lab1/2010EPI_data.csv')
attach(data1)
View(data1)
names (data1) <- as.matrix(data1[1, ])
data1 <- data1[-1, ]
#or,
data1[] <- lapply(data1, function(x) type.convert(as.character(x)))
data1 <- data1[-1, ]
data1$EPI
tf <- is.na(data1$EPI) # records True values if the value is NA
tf
E <- data1$EPI[!tf] # filters out NA values, new array
E
#other data
GRUMP_data <- read.csv("<path>/GPW3_GRUMP_SummaryInformation_2010.csv")
data1 <-read.csv('/Users/evangeline/desktop/Data Analytics/lab1/2010EPI_data.csv')
data1 <-read.csv('/Users/evangeline/desktop/Data Analytics/lab1/2010EPI_data.csv')
View(data1)
attach(data1)
View(data1)
data1$EPI
tf <- is.na(data1$EPI) # records True values if the value is NA
tf
E <- data1$EPI[!tf] # filters out NA values, new array
E
#Cumulative Density Function
plot(ecdf(data1$EPI), do.points=FALSE, verticals=TRUE)
#Quantile-Quantile?
par(pty="s")
qqnorm(data1$EPI); qqline(data1$EPI)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
qqnorm(x); qqline(x)
#Make a Q-Q plot against the generating distribution by: x<-seq(30,95,1)
qqplot(qt(ppoints(250), df = 5), x, xlab = "Q-Q plot for t dsn")
qqline(x)
help(distributions)
data1$ENVHEALTH
tf <- is.na(data1$ENVHEALTH) # records True values if the value is NA
tf
E <- data1$ENVHEALTH[!tf] # filters out NA values, new array
E
plot(ecdf(data1$ENVHEALTH), do.points=FALSE, verticals=TRUE)
#Quantile-Quantile?
par(pty="s")
qqnorm(data1$ENVHEALTH); qqline(data1$ENVHEALTH)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
qqnorm(x); qqline(x)
#Make a Q-Q plot against the generating distribution by: x<-seq(30,95,1)
qqplot(qt(ppoints(250), df = 5), x, xlab = "Q-Q plot for t dsn")
qqline(x)
data1$ECOSYSTEM
tf <- is.na(data1$ECOSYSTEM) # records True values if the value is NA
tf
E <- data1$ECOSYSTEM[!tf] # filters out NA values, new array
E
plot(ecdf(data1$ECOSYSTEM), do.points=FALSE, verticals=TRUE)
#Quantile-Quantile?
par(pty="s")
qqnorm(data1$ECOSYSTEM); qqline(data1$ECOSYSTEM)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
qqnorm(x); qqline(x)
#Make a Q-Q plot against the generating distribution by: x<-seq(30,95,1)
qqplot(qt(ppoints(250), df = 5), x, xlab = "Q-Q plot for t dsn")
qqline(x)
data1$DALY
tf <- is.na(data1$DALY) # records True values if the value is NA
tf
E <- data1$DALY[!tf] # filters out NA values, new array
E
plot(ecdf(data1$DALY), do.points=FALSE, verticals=TRUE)
#Quantile-Quantile?
par(pty="s")
qqnorm(data1$DALY); qqline(data1$DALY)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
qqnorm(x); qqline(x)
#Make a Q-Q plot against the generating distribution by: x<-seq(30,95,1)
qqplot(qt(ppoints(250), df = 5), x, xlab = "Q-Q plot for t dsn")
qqline(x)
data1$AIR_H
tf <- is.na(data1$AIR_H) # records True values if the value is NA
tf
E <- data1$AIR_H[!tf] # filters out NA values, new array
E
plot(ecdf(data1$AIR_H), do.points=FALSE, verticals=TRUE)
#Quantile-Quantile?
par(pty="s")
qqnorm(data1$AIR_H); qqline(data1$AIR_H)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
qqnorm(x); qqline(x)
#Make a Q-Q plot against the generating distribution by: x<-seq(30,95,1)
qqplot(qt(ppoints(250), df = 5), x, xlab = "Q-Q plot for t dsn")
qqline(x)
data1$WATER_H
tf <- is.na(data1$WATER_H) # records True values if the value is NA
tf
E <- data1$WATER_H[!tf] # filters out NA values, new array
E
plot(ecdf(data1$WATER_H), do.points=FALSE, verticals=TRUE)
#Quantile-Quantile?
par(pty="s")
qqnorm(data1$WATER_H); qqline(data1$WATER_H)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
qqnorm(x); qqline(x)
#Make a Q-Q plot against the generating distribution by: x<-seq(30,95,1)
qqplot(qt(ppoints(250), df = 5), x, xlab = "Q-Q plot for t dsn")
qqline(x)
data1$BIODIVERSITY
tf <- is.na(data1$BIODIVERSITY) # records True values if the value is NA
tf
E <- data1$BIODIVERSITY[!tf] # filters out NA values, new array
E
plot(ecdf(data1$BIODIVERSITY), do.points=FALSE, verticals=TRUE)
#Quantile-Quantile?
par(pty="s")
qqnorm(data1$BIODIVERSITY); qqline(data1$BIODIVERSITY)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
qqnorm(x); qqline(x)
#Make a Q-Q plot against the generating distribution by: x<-seq(30,95,1)
qqplot(qt(ppoints(250), df = 5), x, xlab = "Q-Q plot for t dsn")
qqline(x)
#intercomparing the distribution
qqplot(data1$EPI, data1$ENVHEALTH, xlab = "EPI", ylab = "ENVHEALTH")
qqplot(data1$EPI, data1$ECOSYSTEM, xlab = "EPI", ylab = "ECOSYSTEM")
qqplot(data1$EPI, data1$DALY, xlab = "EPI", ylab = "DALY")
qqplot(data1$EPI, data1$AIR_H, xlab = "EPI", ylab = "AIR_H")
qqplot(data1$EPI, data1$WATER_H, xlab = "EPI", ylab = "WATER_H")
qqplot(data1$EPI, data1$BIODIVERSITY, xlab = "EPI", ylab = "BIODIVERSITY")
boxplot(data1$EPI, data1$ENVHEALTH)
boxplot(data1$EPI, data1$ECOSYSTEM)
boxplot(data1$EPI, data1$DALY)
boxplot(data1$EPI, data1$AIR_H)
boxplot(data1$EPI, data1$WATER_H)
boxplot(data1$EPI, data1$BIODIVERSITY)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
qqnorm(x); qqline(x)
#Make a Q-Q plot against the generating distribution by: x<-seq(30,95,1)
qqplot(qt(ppoints(250), df = 5), x, xlab = "Q-Q plot for t dsn")
qqline(x)
data1$DALY
tf <- is.na(data1$DALY) # records True values if the value is NA
tf
E <- data1$DALY[!tf] # filters out NA values, new array
E
plot(ecdf(data1$DALY), do.points=FALSE, verticals=TRUE)
#Quantile-Quantile?
par(pty="s")
qqnorm(data1$DALY); qqline(data1$DALY)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
qqnorm(x); qqline(x)
#Make a Q-Q plot against the generating distribution by: x<-seq(30,95,1)
qqplot(qt(ppoints(250), df = 5), x, xlab = "Q-Q plot for t dsn")
qqline(x)
data1$AIR_H
tf <- is.na(data1$AIR_H) # records True values if the value is NA
tf
E <- data1$AIR_H[!tf] # filters out NA values, new array
E
plot(ecdf(data1$AIR_H), do.points=FALSE, verticals=TRUE)
#Quantile-Quantile?
par(pty="s")
qqnorm(data1$AIR_H); qqline(data1$AIR_H)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
qqnorm(x); qqline(x)
#Make a Q-Q plot against the generating distribution by: x<-seq(30,95,1)
qqplot(qt(ppoints(250), df = 5), x, xlab = "Q-Q plot for t dsn")
qqline(x)
data1$WATER_H
tf <- is.na(data1$WATER_H) # records True values if the value is NA
tf
E <- data1$WATER_H[!tf] # filters out NA values, new array
E
plot(ecdf(data1$WATER_H), do.points=FALSE, verticals=TRUE)
#Quantile-Quantile?
par(pty="s")
qqnorm(data1$WATER_H); qqline(data1$WATER_H)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
qqnorm(x); qqline(x)
#Make a Q-Q plot against the generating distribution by: x<-seq(30,95,1)
qqplot(qt(ppoints(250), df = 5), x, xlab = "Q-Q plot for t dsn")
qqline(x)
data1$BIODIVERSITY
tf <- is.na(data1$BIODIVERSITY) # records True values if the value is NA
tf
E <- data1$BIODIVERSITY[!tf] # filters out NA values, new array
E
plot(ecdf(data1$BIODIVERSITY), do.points=FALSE, verticals=TRUE)
#Quantile-Quantile?
par(pty="s")
qqnorm(data1$BIODIVERSITY); qqline(data1$BIODIVERSITY)
#Simulated data from t-distribution:
x <- rt(250, df = 5)
qqnorm(x); qqline(x)
#Make a Q-Q plot against the generating distribution by: x<-seq(30,95,1)
qqplot(qt(ppoints(250), df = 5), x, xlab = "Q-Q plot for t dsn")
qqline(x)
#intercomparing the distribution
qqplot(data1$EPI, data1$ENVHEALTH, xlab = "EPI", ylab = "ENVHEALTH")
qqplot(data1$EPI, data1$ECOSYSTEM, xlab = "EPI", ylab = "ECOSYSTEM")
qqplot(data1$EPI, data1$DALY, xlab = "EPI", ylab = "DALY")
qqplot(data1$EPI, data1$AIR_H, xlab = "EPI", ylab = "AIR_H")
EPI_data <-read.csv('/Users/evangeline/desktop/Data Analytics/lab1/2010EPI_data.csv')
view(EPI_data)
View(EPI_data)
fix(EPI_data)
attach(EPI_data) #set the default objects
fix(EPI_data)
View(EPI_data)
attach(EPI_data) #set the default objects
fix(EPI_data)
install XQuartz from www.xquartz.org
XQuartz from www.xquartz.org
help("fix")
install XQuartz
attach(EPI_data) #set the default objects
#fix(EPI_data)
tf <- is.na(EPI)
#fix(EPI_data)
tf <- is.na(EPI_data)
E <- EPI_data[!tf]
summary(EPI_data)
View(EPI_data)
title = EPI_data[1, ]
title
title = EPI_data.top_row(1)
title
title = EPI_data.top_1()
title = EPI_data.head1()
title = EPI_data.head(1)
title = EPI_data.head()
title
EPI_data <-read.csv('/Users/evangeline/desktop/Data Analytics/lab1/2010EPI_data.csv')
View(EPI_data)
title = EPI_data.head()
View(EPI_data)
colnames(EPI_data) <- EPI_data[1,]
attach(EPI_data) #set the default objects
#fix(EPI_data)
tf <- is.na(EPI_data)
E <- EPI_data[!tf]
summary(EPI_data)
EPI_data = EPI_data[-1,]
attach(EPI_data) #set the default objects
#fix(EPI_data)
tf <- is.na(EPI_data)
E <- EPI_data[!tf]
summary(EPI_data)
EPI_data_2010<-read.csv('/Users/evangeline/desktop/Data Analytics/lab1/2010EPI_data.csv')
EPI_data_2010<-read.csv('/Users/evangeline/desktop/Data Analytics/lab1/2010EPI_data.csv')
View(EPI_data_2010)
attach(EPI_data_2010) #sets the default object
fix(EPI_data_2010) #Launches a simple data editor
names(EPI_data_2010) <- as.matrix(EPI_data_2010[1,])
EPI_data_2010 <- EPI_data_2010[-1,] #change the first row to be the header in R
#or,
EPI_data_2010[] <- lapply(EPI_data_2010, function(x){
type.convert(as.character(x))
})
EPI_data_2010
attach(EPI_data_2010) #sets the default object
fix(EPI_data_2010) #Launches a simple data editor
attach(EPI_data_2010) #sets the default object
fix(EPI_data_2010) #Launches a simple data editor
EPI_data_2010<-read.csv('/Users/evangeline/desktop/Data Analytics/lab1/2010EPI_data.csv')
View(EPI_data_2010)
attach(EPI_data_2010) #sets the default object
fix(EPI_data_2010) #Launches a simple data editor
#MASS library
library(MASS) # load the library MASS
attach(Boston) # attaching the dataset
?Boston # help function with "?"
head(Boston) # show the head of the dataset
dim(Boston) # dimensions of the dataset
names(Boston) # column names
str(Boston) # str function shows the structure of the dataset
nrow(Boston) # function shows the number of rows
ncol(Boston) # function shows the number of columns
summary(Boston) # summary() function shows the summary statistics
summary(Boston$crim) # summary of the "crime" column in the Boston dataset
# ISLR library
library(ISLR)
data(Auto)
# ISLR library
library(ISLR)
data(Auto)
head(Auto)
names(Auto)
summary(Auto)
summary(Auto$mpg)
fivenum(Auto$mpg)
boxplot(Auto$mpg)
hist(Auto$mpg)
summary(Auto$horsepower)
summary(Auto$weight)
fivenum(Auto$weight)
boxplot(Auto$weight)
mean(Auto$weight)
median((Auto$weight))
# ISLR library
library(ISLR)
# ISLR library
library(ISLR)
install.packages("MASS") # installing the MASS package
install.packages("MASS")
library(MASS) # load the library MASS
attach(Boston) # attaching the dataset
?Boston # help function with "?"
head(Boston) # show the head of the dataset
dim(Boston) # dimensions of the dataset
names(Boston) # column names
str(Boston) # str function shows the structure of the dataset
nrow(Boston) # function shows the number of rows
ncol(Boston) # function shows the number of columns
summary(Boston) # summary() function shows the summary
statistics
summary(Boston$crim) # summary of the "crime" column in the Boston dataset
summary(Boston) # summary() function shows the summary statistics
summary(Boston$crim) # summary of the "crime" column in the Boston dataset
install.packages("ISLR") # installing the ISLR package
library(ISLR)
data(Auto)
head(Auto)
names(Auto)
summary(Auto)
summary(Auto$mpg)
fivenum(Auto$mpg)
boxplot(Auto$mpg)
hist(Auto$mpg)
summary(Auto$horsepower)
summary(Auto$weight)
fivenum(Auto$weight)
boxplot(Auto$weight)
mean(Auto$weight)
median((Auto$weight))
